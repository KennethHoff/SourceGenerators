using Oxx.Backend.Generators.PocoSchema.Core;
using Oxx.Backend.Generators.PocoSchema.Core.Models;
using Oxx.Backend.Generators.PocoSchema.Core.Models.Contracts;
using Oxx.Backend.Generators.PocoSchema.Zod.Configuration;
using Oxx.Backend.Generators.PocoSchema.Zod.SchemaTypes.Contracts;

namespace Oxx.Backend.Generators.PocoSchema.Zod;

public class ZodSchemaConverter : ISchemaConverter
{
	private readonly ZodSchemaConfiguration _configuration;

	private readonly IDictionary<Type, ISchema> _generatedSchemas = new Dictionary<Type, ISchema>();

	public ZodSchemaConverter(ZodSchemaConfiguration configuration)
	{
		_configuration = configuration;
	}

	#region Interface implementations

	public IEnumerable<FileInformation> GenerateFileContent(IEnumerable<PocoObject> pocoObjects)
	{
		var atomicSchemas = GenerateAtomicSchemas(_configuration.AtomicSchemaDictionary);
		var molecularSchemas = GenerateMolecularSchemas(pocoObjects);
		return atomicSchemas.Concat(molecularSchemas).Where(x => x != FileInformation.None);
	}

	#endregion

	private FileInformation GenerateAtomicSchema(KeyValuePair<Type, IAtomicZodSchema> atomicSchema)
	{
		_generatedSchemas.Add(atomicSchema.Key, atomicSchema.Value);

		if (atomicSchema.Value.SchemaName == SchemaName.BuiltIn)
		{
			return FileInformation.None;
		}

		return new FileInformation
		{
			Content = GenerateFileContent(atomicSchema.Value),
			Name = GenerateFileName(atomicSchema.Value),
		};
	}

	private IEnumerable<FileInformation> GenerateAtomicSchemas(IDictionary<Type, IAtomicZodSchema> configurationAtomicSchemaDictionary)
		=> configurationAtomicSchemaDictionary
			.Select(GenerateAtomicSchema);

	private FileContent GenerateFileContent(IZodSchema schemaValue)
	{
		if (schemaValue is IAtomicZodSchema atomicZodSchema)
		{
			return new FileContent($$"""
			// This file is generated by Oxx.Backend.Generators.PocoSchema.Zod
			// Do not edit this file manually

			import { z } from "zod";

			export const {{_configuration.FormatSchemaName(atomicZodSchema.SchemaName)}} = {{atomicZodSchema.SchemaDefinition}};
			
			export type {{_configuration.FormatSchemaTypeName(atomicZodSchema.SchemaName)}} = z.infer<typeof {{_configuration.FormatSchemaName(atomicZodSchema.SchemaName)}}>;
			""");
		}
		
		return FileContent.None;
	}

	private FileName GenerateFileName(IZodSchema schemaValue)
		=> new(string.Format(_configuration.SchemaFileNameFormat, schemaValue.SchemaName));

	private FileInformation GenerateMolecularSchema(PocoObject pocoObject)
		=> FileInformation.None;

	private IEnumerable<FileInformation> GenerateMolecularSchemas(IEnumerable<PocoObject> pocoObjects)
		=> pocoObjects
			.Select(GenerateMolecularSchema);

	// 	private PropertyInformation CreateBasicSchemaPropertyType(IZodSchema schema)
	// 	{
	// 		if (schema is IBuiltInZodSchema)
	// 		{
	// 			return new PropertyInformation(schema.SchemaLogic.Logic, ImportInformation.None);
	// 		}
	//
	// 		var schemaName = schema.SchemaName.GetPropertyName(_configuration);
	// 		return new PropertyInformation(schemaName, new ImportInformation
	// 		{
	// 			Name = schemaName,
	// 			Path = "./" + schemaName,
	// 			Required = true,
	// 		});
	// 	}
	//
	// 	private FileInformation GenerateFileContent(PocoObject pocoObject)
	// 	{
	// 		var schema = GenerateSchema(pocoObject);
	// 		var schemaType = GenerateSchemaTypeExport(pocoObject.GetSchemaTypeName(_configuration), pocoObject.GetSchemaName(_configuration));
	//
	// 		var additionalImports = schema.AdditionalImports
	// 			.Distinct()
	// 			.Aggregate(string.Empty, (current, import) => $"{current}{Environment.NewLine}{import}");
	// 		var content = $$"""
	// 		import { z } from "zod";
	// 		{{additionalImports}}
	//
	// 		{{schema.Schema}}
	//
	// 		{{schemaType}}
	// 		""";
	//
	// 		var fileInformation = new FileInformation(pocoObject.GetFileName(_configuration), content);
	// 		
	// 		return fileInformation;
	// 	}
	//
	// 	private IEnumerable<(string Property, ImportInformation ImportInformation)> GenerateProperties(PocoObject pocoObject)
	// 		=> pocoObject.Properties
	// 			.Where(x => _configuration.SchemaTypeDictionary.ContainsKey(x.PropertyType))
	// 			.Select(GenerateSchemaProperty);
	//
	// 	private (string Schema, IReadOnlyCollection<string> AdditionalImports) GenerateSchema(PocoObject pocoObject)
	// 	{
	// 		var properties = GenerateProperties(pocoObject).ToArray();
	// 		
	// 		var imports = properties
	// 			.Where(x => x.ImportInformation.Required)
	// 			.Distinct()
	// 			.Select(x => x.ImportInformation.ImportStatement)
	// 			.ToArray();
	//
	// 		var schema = $$"""
	// 		export const {{pocoObject.GetSchemaName(_configuration)}} = z.object({
	// 			{{string.Join("," + Environment.NewLine + "\t", properties.Select(x => x.Property))}},
	// 		});
	// 		""";
	// 		return (schema, imports);
	// 	}
	//
	// 	private (string Property, ImportInformation ImportInformation) GenerateSchemaProperty(PropertyInfo property)
	// 	{
	// 		var propertyType = GenerateSchemaPropertyType(property);
	// 		
	// 		var propertyOutput = $"{property.Name.ToCamelCaseInvariant()}: {propertyType.Property}";
	// 		
	// 		return (propertyOutput, propertyType.ImportInformation);
	// 	}
	//
	// 	private PropertyInformation GenerateSchemaPropertyType(PropertyInfo property)
	// 	{
	// 		if (!_configuration.SchemaTypeDictionary.TryGetValue(property.PropertyType, out var schemaType))
	// 		{
	// 			return PropertyInformation.None;
	// 		}
	//
	// 		var basicSchemaPropertyType = CreateBasicSchemaPropertyType(schemaType);
	//
	// 		return property.IsNullable()
	// 			? basicSchemaPropertyType.WithNullability()
	// 			: basicSchemaPropertyType;
	// 	}


	//
	// 	private FileInformation GenerateType(IZodSchema schema)
	// 	{
	// 		var content = $$"""
	// 		// This file was autogenerated by Oxx.Backend.Generators.PocoSchema.Zod on {{DateTime.Now}}
	// 		// Do not edit this file manually
	//
	// 		import { z } from "zod";
	//
	// 		export const {{schema.SchemaName.GetPropertyName(_configuration)}} = {{schema.SchemaLogic}};
	//
	// 		{{GenerateSchemaTypeExport(schema.SchemaName)}}
	// 		""";
	//
	// 		return new FileInformation(GenerateFileName(schema.SchemaName), content);
	// 	}
	//
	// 	private IEnumerable<FileInformation> GenerateTypes()
	// 		=> _configuration.SchemaTypeDictionary
	// 			.Where(kvp => kvp.Value is not IBuiltInZodSchema)
	// 			.Select(kvp => GenerateType(kvp.Value));
	//
	// 	private static string GenerateSchemaTypeExport(string typeName, string schemaType)
	// 		=> $"export type {typeName} = z.infer<typeof {schemaType}>;";
	//
	// 	private readonly record struct ImportInformation(string Name, string Path, bool Required)
	// 	{
	// 		public static readonly ImportInformation None = new(string.Empty, string.Empty, false);
	//
	// 		public string ImportStatement => $$""""
	// import { {{Name}} } from "{{Path}}";
	// """";
	// 	}
	//
	// 	private readonly record struct PropertyInformation(string Property, ImportInformation ImportInformation)
	// 	{
	// 		public static readonly PropertyInformation None = new(string.Empty, ImportInformation.None);
	//
	// 		public PropertyInformation WithNullability()
	// 			=> this with
	// 			{
	// 				Property = Property + ".optional()",
	// 			};
	// 	}
}