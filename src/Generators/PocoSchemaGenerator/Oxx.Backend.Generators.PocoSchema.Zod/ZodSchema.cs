using System.Reflection;
using Oxx.Backend.Generators.PocoSchema.Core;
using Oxx.Backend.Generators.PocoSchema.Core.Extensions;
using Oxx.Backend.Generators.PocoSchema.Zod.Configuration;
using Oxx.Backend.Generators.PocoSchema.Zod.SchemaTypes.Contracts;

namespace Oxx.Backend.Generators.PocoSchema.Zod;

public class ZodSchema : ISchema
{
	private readonly ZodSchemaConfiguration _configuration;

	public ZodSchema(ZodSchemaConfiguration configuration)
	{
		_configuration = configuration;
	}

	#region Interface implementations

	public IEnumerable<FileInformation> GenerateFileContent(IEnumerable<PocoObject> pocoObjects)
	{
		var types = GenerateTypes();
		var schemas = GenerateSchemas(pocoObjects);

		return types.Concat(schemas);
	}

	#endregion

	private FileInformation GenerateFileContent(PocoObject pocoObject)
	{
		var schema = GenerateSchema(pocoObject);
		var typeExport = GenerateTypeExport(pocoObject.Name);

		var additionalImports = schema.AdditionalImports
			.Distinct()
			.Aggregate(string.Empty, (current, import) => $"{current}{Environment.NewLine}{import}");
		var content = $$"""
		import { z } from "zod";
		{{additionalImports}}

		{{schema.Schema}}

		{{typeExport}}
		""";

		return new FileInformation(GenerateFileName(pocoObject.Name), content);
	}

	private string GenerateFileName(BaseName baseName)
		=> $"{baseName.GetSchemaName(_configuration)}.ts";

	private (string Schema, IReadOnlyCollection<string> AdditionalImports) GenerateSchema(PocoObject pocoObject)
	{
		var properties = GenerateSchemaProperties(pocoObject).ToArray();
		
		var imports = properties
			.Where(x => x.ImportInformation.Required)
			.Distinct()
			.Select(i => i.ImportInformation.ImportStatement)
			.ToArray();

		var schema = $$"""
		export const {{pocoObject.Name.GetSchemaName(_configuration)}} = z.object({
			{{string.Join("," + Environment.NewLine + "\t", properties.Select(x => x.Property))}},
		});
		""";
		return (schema, imports);
	}

	private IEnumerable<(string Property, ImportInformation ImportInformation)> GenerateSchemaProperties(PocoObject pocoObject)
		=> pocoObject.Properties
			.Where(x => _configuration.SchemaTypeDictionary.ContainsKey(x.PropertyType))
			.Select(GenerateSchemaProperty);

	private (string Property, ImportInformation ImportInformation) GenerateSchemaProperty(PropertyInfo property)
	{
		var propertyType = GenerateSchemaPropertyType(property);
		
		var propertyOutput = $"{property.Name.ToCamelCaseInvariant()}: {propertyType.Property}";
		
		return (propertyOutput, propertyType.ImportInformation);
	}

	private PropertyInformation GenerateSchemaPropertyType(PropertyInfo property)
	{
		if (!_configuration.SchemaTypeDictionary.TryGetValue(property.PropertyType, out var schemaType))
		{
			return PropertyInformation.None;
		}

		var basicSchemaPropertyType = CreateBasicSchemaPropertyType(schemaType);

		return property.IsNullable()
			? basicSchemaPropertyType.WithNullability()
			: basicSchemaPropertyType;
	}

	private PropertyInformation CreateBasicSchemaPropertyType(IZodSchemaType schemaType)
	{
		if (schemaType is IBuiltInZodSchemaType)
		{
			return new PropertyInformation(schemaType.ValidationSchemaLogic.Logic, ImportInformation.None);
		}

		var schemaName = schemaType.ValidationSchemaName.GetSchemaName(_configuration);
		return new PropertyInformation(schemaName, new ImportInformation
		{
			Name = schemaName,
			Path = "./" + schemaName,
			Required = true,
		});
	}

	private IEnumerable<FileInformation> GenerateSchemas(IEnumerable<PocoObject> pocoObjects)
		=> pocoObjects.Select(GenerateFileContent);

	private FileInformation GenerateType(IZodSchemaType schemaType)
	{
		var content = $$"""
		// This file was autogenerated by Oxx.Backend.Generators.PocoSchema.Zod on {{DateTime.Now}}
		// Do not edit this file manually

		import { z } from "zod";

		export const {{schemaType.ValidationSchemaName.GetSchemaName(_configuration)}} = {{schemaType.ValidationSchemaLogic}};

		{{GenerateTypeExport(schemaType.ValidationSchemaName)}}
		""";

		return new FileInformation(GenerateFileName(schemaType.ValidationSchemaName), content);
	}

	private IEnumerable<FileInformation> GenerateTypes()
		=> _configuration.SchemaTypeDictionary
			.Where(kvp => kvp.Value is not IBuiltInZodSchemaType)
			.Select(kvp => GenerateType(kvp.Value));

	private string GenerateTypeExport(BaseName baseName)
		=> $"export type {baseName.GetSchemaTypeName(_configuration)} = z.infer<typeof {baseName.GetSchemaName(_configuration)}>;";


	private record struct ImportInformation(string Name, string Path, bool Required)
	{
		public static readonly ImportInformation None = new(string.Empty, string.Empty, false);
		
		public string ImportStatement => $$""""
import { {{Name}} } from "{{Path}}";
"""";
	}

	private record struct PropertyInformation(string Property, ImportInformation ImportInformation)
	{
		public static readonly PropertyInformation None = new(string.Empty, ImportInformation.None);

		public PropertyInformation WithNullability()
			=> this with
			{
				Property = Property + ".optional()",
			};
	}
}