using System.Reflection;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Oxx.Backend.Generators.PocoSchema.Zod.Core;
using Oxx.Backend.Generators.PocoSchema.Zod.SchemaTypes.Contracts;

namespace Oxx.Backend.Generators.PocoSchema.Zod;

public sealed class ZodSchema : ISchema
{
	private readonly IDictionary<Type, IZodSchemaType> _schemaTypes;
	private readonly SemanticModel _semanticModel;

	public ZodSchema(SchemaGeneratorConfigurationBuilder<IZodSchemaType> configurationBuilder, SemanticModel semanticModel)
	{
		_semanticModel = semanticModel;
		_schemaTypes = configurationBuilder.SchemaTypeDictionary;
	}

	#region Interface implementations

	public IEnumerable<FileInformation> GenerateFileContent(IEnumerable<PocoObject> pocoObjects)
	{
		var types = GenerateTypes();
		var schemas = GenerateSchemas(pocoObjects);
		return types.Concat(schemas);
	}

	#endregion

	private FileInformation GenerateFileContent(PocoObject pocoObject)
	{
		var schemaName = pocoObject.Name;
		var content = $$"""
		import { z } from 'zod';

		{{GenerateSchema(pocoObject)}}

		{{GenerateTypeExport(schemaName)}}
		""";

		return new FileInformation(GenerateFileName(schemaName), content);
	}

	private static string GenerateFileName(string schemaName)
		=> $"{schemaName}.ts";

	private string GenerateSchema(PocoObject pocoObject)
		=> $$"""
		export const {{GenerateSchemaName(pocoObject.Name)}} = z.object({
			{{GenerateSchemaProperties(pocoObject)}}
		});
		""";

	private string GenerateSchemaProperties(PocoObject pocoObject)
		=> pocoObject.Properties.Select(GenerateSchemaProperty).JoinWithNewLine();

	private string GenerateSchemaProperty(IPropertySymbol property)
	{
		return $"{property.Name}: {GenerateSchemaPropertyType(property.Type)},";
	}

	private string GenerateSchemaPropertyType(ITypeSymbol type)
	{
		if (type.Name == "string")
		{
			return _schemaTypes[typeof(string)].ValidationSchemaLogic;
		}
		
		if (type.Name == "int")
		{
			return _schemaTypes[typeof(int)].ValidationSchemaLogic;
		}

		throw new NotImplementedException();
	}

	private IEnumerable<FileInformation> GenerateSchemas(IEnumerable<PocoObject> pocoObjects)
		=> pocoObjects.Select(GenerateFileContent);

	private FileInformation GenerateType(IZodSchemaType schemaType)
	{
		var schemaName = GenerateSchemaName(schemaType.ValidationSchemaName);
		var content = $$"""
		// This file was autogenerated by Oxx.Backend.Generators.PocoSchema.Zod on {{DateTime.Now}}
		// Do not edit this file manually

		import { z } from 'zod';

		export const {{schemaName}} = {{schemaType.ValidationSchemaLogic}};

		{{GenerateTypeExport(schemaName)}}
		""";

		return new FileInformation(GenerateFileName(schemaName), content);
	}

	private IEnumerable<FileInformation> GenerateTypes()
		=> _schemaTypes
			.Where(kvp => kvp.Value is not IBuiltInZodSchemaType)
			.Select(kvp => GenerateType(kvp.Value));

	private static string GenerateSchemaName(string schemaName)
		=> $"{schemaName}Schema";

	private static string GenerateTypeExport(string schemaName)
		=> $"export type {GenerateTypeName(schemaName)} = z.infer<typeof {GenerateSchemaName(schemaName)}>;";

	private static string GenerateTypeName(string schemaName)
		=> $"{GenerateSchemaName(schemaName)}Type";
}