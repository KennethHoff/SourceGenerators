using System.Reflection;
using Oxx.Backend.Generators.PocoSchema.Core;
using Oxx.Backend.Generators.PocoSchema.Core.Configuration;
using Oxx.Backend.Generators.PocoSchema.Zod.Configuration;
using Oxx.Backend.Generators.PocoSchema.Zod.SchemaTypes.Contracts;

namespace Oxx.Backend.Generators.PocoSchema.Zod;

public class ZodSchema : ISchema
{
	private readonly ZodSchemaGeneratorConfiguration _configuration;

	public ZodSchema(ZodSchemaGeneratorConfiguration configuration)
	{
		_configuration = configuration;
	}

	#region Interface implementations

	public IEnumerable<FileInformation> GenerateFileContent(IEnumerable<PocoObject> pocoObjects)
	{
		var types = GenerateTypes();
		var schemas = GenerateSchemas(pocoObjects);
		return types.Concat(schemas);
	}

	#endregion

	private FileInformation GenerateFileContent(PocoObject pocoObject)
	{
		var content = $$"""
		import { z } from 'zod';

		{{GenerateSchema(pocoObject)}}

		{{GenerateTypeExport(pocoObject.Name)}}
		""";

		return new FileInformation(GenerateFileName(pocoObject.Name), content);
	}

	private string GenerateFileName(BaseName baseName)
		=> Path.Combine(_configuration.OutputDirectory, $"{baseName.GetSchemaName(_configuration)}.ts");

	private string GenerateSchema(PocoObject pocoObject)
	{
		var properties = GenerateSchemaProperties(pocoObject).ToArray();
		return $$"""
		export const {{pocoObject.Name.GetSchemaName(_configuration)}} = z.object({
			{{string.Join("," + Environment.NewLine + "\t", properties)}}
		});
		""";
	}

	private IEnumerable<string> GenerateSchemaProperties(PocoObject pocoObject)
		=> pocoObject.Properties
			.Where(x => _configuration.SchemaTypeDictionary.ContainsKey(x.PropertyType))
			.Select(GenerateSchemaProperty);

	private string GenerateSchemaProperty(PropertyInfo property)
		=> $"{property.Name.ToCamelCaseInvariant()}: {GenerateSchemaPropertyType(property.PropertyType)}";

	private SchemaLogic? GenerateSchemaPropertyType(Type type)
		=> _configuration.SchemaTypeDictionary.ContainsKey(type)
			? _configuration.SchemaTypeDictionary[type].ValidationSchemaLogic
			: null;

	private IEnumerable<FileInformation> GenerateSchemas(IEnumerable<PocoObject> pocoObjects)
		=> pocoObjects.Select(GenerateFileContent);

	private FileInformation GenerateType(IZodSchemaType schemaType)
	{
		var content = $$"""
		// This file was autogenerated by Oxx.Backend.Generators.PocoSchema.Zod on {{DateTime.Now}}
		// Do not edit this file manually

		import { z } from 'zod';

		export const {{schemaType.ValidationSchemaName.GetSchemaName(_configuration)}} = {{schemaType.ValidationSchemaLogic}};

		{{GenerateTypeExport(schemaType.ValidationSchemaName)}}
		""";

		return new FileInformation(GenerateFileName(schemaType.ValidationSchemaName), content);
	}

	private IEnumerable<FileInformation> GenerateTypes()
		=> _configuration.SchemaTypeDictionary
			.Where(kvp => kvp.Value is not IBuiltInZodSchemaType)
			.Select(kvp => GenerateType(kvp.Value));

	private string GenerateTypeExport(BaseName baseName)
		=> $"export type {baseName.GetSchemaTypeName(_configuration)} = z.infer<typeof {baseName.GetSchemaName(_configuration)}>;";
}