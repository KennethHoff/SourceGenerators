using System.Xml.Linq;
using Microsoft.CodeAnalysis.Text;

namespace LanguageFileParser.Generator;

[Generator]
public class LanguageFileTransformGenerator : ISourceGenerator
{
	#region Interface implementations
	
	private static readonly Version AssemblyVersion = typeof(LanguageFileTransformGenerator).Assembly.GetName().Version;

	public void Execute(GeneratorExecutionContext context)
	{
		// find anything that matches our files
		var myFiles = context.AdditionalFiles.Where(x => x.Path.Contains(".xml")).ToList();
		// var myFiles = context.AdditionalFiles.Where(at => Regex.IsMatch(at.Path, @"^.*Resources/LanguageFiles/.*.xml$"));

		myFiles.ForEach(file =>
		{
			var content = file.GetText(context.CancellationToken);
			if (content is null)
			{
				return;
			}

			var parsed = ParseXmlContent(content);
			var sanitizedPath = SanitizePath(file.Path);
			context.AddSource($"{sanitizedPath}.g.cs", parsed);
		});
		// foreach (var file in myFiles)
		// {
			// var content = file.GetText(context.CancellationToken);

			// do some transforms based on the file context
			// string output = MyXmlToCSharpCompiler.Compile(content);9

			// var sourceText = SourceText.From(output, Encoding.UTF8);

			// var sanitizedPath = SanitizePath(file.Path);

			// context.AddSource($"{file.Path}.g.cs", "lol");
		// }
	}

	private static string ParseXmlContent(SourceText content)
	{
		var parsed = XDocument.Parse(content.ToString());
		var fileLayout =
			$"""
			// This file is generated by Oxx.Backend.Utils.LanguageFileParser
			// Version: {AssemblyVersion}
			{parsed}
			""";
		
		return fileLayout;
	}

	public void Initialize(GeneratorInitializationContext context)
	{ }

	#endregion

	private static string SanitizePath(string filePath)
	{
		var indexOfLastBackslash = filePath.LastIndexOf('\\');
		return filePath.Substring(indexOfLastBackslash + 1);
	}
}
